{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// export default function ViewerDashboard() {\n//   const [auctions, setAuctions] = useState([]); // State to hold the auctions data\n//   const [loading, setLoading] = useState(true); // State to handle loading\n//   const [error, setError] = useState(null); // State for error handling\n\n//   useEffect(() => {\n//     // Prevent page reload on first visit\n//     if (!sessionStorage.getItem('hasVisited')) {\n//       sessionStorage.setItem('hasVisited', 'true');\n//       window.location.reload();\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     console.log(\"Auctions state updated:\", auctions);\n//   }, [auctions]); // This will trigger every time `auctions` changes\n\n//   useEffect(() => {\n//     axios\n//       .get('http://localhost:5000/api/auctions/')\n//       .then((response) => {\n//         setAuctions(response.data.auctions); // if response.data.auctions is the array\n//         setLoading(false);\n//       })\n//       .catch((err) => {\n//         setError('Failed to fetch auctions');\n//         setLoading(false);\n//       });\n//   }, []); // Run only on component mount\n\n//   if (loading) {\n//     return <div>Loading...</div>; // Show loading message while data is being fetched\n//   }\n\n//   if (error) {\n//     return <div>{error}</div>; // Display error message if fetching fails\n//   }\n\n//   return (\n//     <div>\n//       {Array.isArray(auctions) && auctions.length > 0 ? (\n//         auctions.map(auction => (\n//           <div key={auction._id} style={{ marginBottom: '20px', border: '1px solid #ccc', padding: '10px' }}>\n//             <h2>{auction.tournamentName || \"No Tournament Name\"}</h2>\n//             <p><strong>Leader Email:</strong> {auction.leaderEmail || \"No Email Provided\"}</p>\n//             <p><strong>Bid Points Per Team:</strong> {auction.bidPointsPerTeam || \"N/A\"}</p>\n\n//             <h3>Teams:</h3>\n//             {auction.teams && auction.teams.length > 0 ? (\n//               auction.teams.map((team, index) => (\n//                 <div key={index} style={{ marginBottom: '10px' }}>\n//                   <h4>{team.name || \"No Team Name\"}</h4>\n//                   <p><strong>Bid Points:</strong> {team.bidPoints}</p>\n//                   <p><strong>Remaining Bid Points:</strong> {team.remainingBidPoints}</p>\n//                   {team.image && <img src={team.image} alt={team.name} style={{ width: '100px', height: 'auto' }} />}\n//                 </div>\n//               ))\n//             ) : (\n//               <p>No teams available.</p>\n//             )}\n\n//             <h3>Players:</h3>\n//             {/* You might need to fetch player data separately if it is referenced by ObjectId */}\n//             {auction.players && auction.players.length > 0 ? (\n//               auction.players.map((playerId, index) => (\n//                 <p key={index}>{playerId}</p> // You should fetch player details if necessary\n//               ))\n//             ) : (\n//               <p>No players listed.</p>\n//             )}\n//           </div>\n//         ))\n//       ) : (\n//         <p>No auctions found.</p>\n//       )}\n//     </div>\n//   );\n// };","map":{"version":3,"names":[],"sources":["/home/uki-jaffna/biddingweb/frontend/src/components/ViewerDashboard.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// export default function ViewerDashboard() {\n//   const [auctions, setAuctions] = useState([]); // State to hold the auctions data\n//   const [loading, setLoading] = useState(true); // State to handle loading\n//   const [error, setError] = useState(null); // State for error handling\n\n//   useEffect(() => {\n//     // Prevent page reload on first visit\n//     if (!sessionStorage.getItem('hasVisited')) {\n//       sessionStorage.setItem('hasVisited', 'true');\n//       window.location.reload();\n//     }\n//   }, []);\n\n  \n//   useEffect(() => {\n//     console.log(\"Auctions state updated:\", auctions);\n//   }, [auctions]); // This will trigger every time `auctions` changes\n  \n//   useEffect(() => {\n//     axios\n//       .get('http://localhost:5000/api/auctions/')\n//       .then((response) => {\n//         setAuctions(response.data.auctions); // if response.data.auctions is the array\n//         setLoading(false);\n//       })\n//       .catch((err) => {\n//         setError('Failed to fetch auctions');\n//         setLoading(false);\n//       });\n//   }, []); // Run only on component mount\n  \n\n//   if (loading) {\n//     return <div>Loading...</div>; // Show loading message while data is being fetched\n//   }\n\n//   if (error) {\n//     return <div>{error}</div>; // Display error message if fetching fails\n//   }\n\n//   return (\n//     <div>\n//       {Array.isArray(auctions) && auctions.length > 0 ? (\n//         auctions.map(auction => (\n//           <div key={auction._id} style={{ marginBottom: '20px', border: '1px solid #ccc', padding: '10px' }}>\n//             <h2>{auction.tournamentName || \"No Tournament Name\"}</h2>\n//             <p><strong>Leader Email:</strong> {auction.leaderEmail || \"No Email Provided\"}</p>\n//             <p><strong>Bid Points Per Team:</strong> {auction.bidPointsPerTeam || \"N/A\"}</p>\n            \n//             <h3>Teams:</h3>\n//             {auction.teams && auction.teams.length > 0 ? (\n//               auction.teams.map((team, index) => (\n//                 <div key={index} style={{ marginBottom: '10px' }}>\n//                   <h4>{team.name || \"No Team Name\"}</h4>\n//                   <p><strong>Bid Points:</strong> {team.bidPoints}</p>\n//                   <p><strong>Remaining Bid Points:</strong> {team.remainingBidPoints}</p>\n//                   {team.image && <img src={team.image} alt={team.name} style={{ width: '100px', height: 'auto' }} />}\n//                 </div>\n//               ))\n//             ) : (\n//               <p>No teams available.</p>\n//             )}\n\n//             <h3>Players:</h3>\n//             {/* You might need to fetch player data separately if it is referenced by ObjectId */}\n//             {auction.players && auction.players.length > 0 ? (\n//               auction.players.map((playerId, index) => (\n//                 <p key={index}>{playerId}</p> // You should fetch player details if necessary\n//               ))\n//             ) : (\n//               <p>No players listed.</p>\n//             )}\n//           </div>\n//         ))\n//       ) : (\n//         <p>No auctions found.</p>\n//       )}\n//     </div>\n//   );\n// };\n\n  \n\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}