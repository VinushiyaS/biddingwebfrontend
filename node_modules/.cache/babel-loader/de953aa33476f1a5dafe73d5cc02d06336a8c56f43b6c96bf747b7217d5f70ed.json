{"ast":null,"code":"var _jsxFileName = \"/home/uki-jaffna/biddingweb/frontend/src/components/AdminDashboard.js\";\n// import React, { useState, useEffect } from 'react';\n\n// const AdminDashboard = () => {\n//     const [leaders, setLeaders] = useState([]);\n//     const [users, setUsers] = useState([]);\n//     const [packages, setPackages] = useState([]);\n//     const [totalUsers, setTotalUsers] = useState(0);\n//     const [totalLeaders, setTotalLeaders] = useState(0);\n//     const [newPackage, setNewPackage] = useState({ name: '', price: '', duration: '' });\n//     const [editingPackage, setEditingPackage] = useState(null);\n\n//     // Fetch all data when the component mounts\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             try {\n//                 // Fetch leaders, users, and stats\n//                 const leadersResponse = await fetch('http://localhost:5000/api/admin/leaders');\n//                 const leadersData = await leadersResponse.json();\n\n//                 const usersResponse = await fetch('/api/admin/users');\n//                 const usersData = await usersResponse.json();\n\n//                 const packagesResponse = await fetch('http://api/admin/packages');\n//                 const packagesData = await packagesResponse.json();\n\n//                 const statsResponse = await fetch('/api/admin/stats');\n//                 const statsData = await statsResponse.json();\n\n//                 setLeaders(leadersData);\n//                 setUsers(usersData);\n//                 setPackages(packagesData);\n//                 setTotalUsers(statsData.totalUsers);\n//                 setTotalLeaders(statsData.totalLeaders);\n//             } catch (error) {\n//                 console.error(\"Error fetching data:\", error);\n//             }\n//         };\n//         fetchData();\n//     }, []);\n\n//     // Add a new package\n// const handleAddPackage = async () => {\n//     try {\n//         const response = await fetch('/api/package/api/admin/packages', { // Change to match the route defined\n//             method: 'POST',\n//             headers: { 'Content-Type': 'application/json' },\n//             body: JSON.stringify(newPackage),\n//         });\n//         if (response.ok) {\n//             const packageData = await response.json(); // Ensure you get the response data\n//             setPackages([...packages, packageData]); // Use the newly created package\n//             setNewPackage({ name: '', price: '', duration: '' });\n//             alert('Package added successfully');\n//         } else {\n//             alert('Failed to add package');\n//         }\n//     } catch (error) {\n//         console.error(\"Error adding package:\", error);\n//     }\n// };\n\n//     // Edit an existing package\n//     const handleEditPackage = async (packageId) => {\n//         try {\n//             const response = await fetch(`/api/admin/edit-package/${packageId}`, {\n//                 method: 'PUT',\n//                 headers: { 'Content-Type': 'application/json' },\n//                 body: JSON.stringify(editingPackage),\n//             });\n//             if (response.ok) {\n//                 alert('Package updated successfully');\n//                 setPackages(packages.map(pkg => pkg._id === packageId ? editingPackage : pkg));\n//                 setEditingPackage(null);\n//             } else {\n//                 alert('Failed to update package');\n//             }\n//         } catch (error) {\n//             console.error(\"Error editing package:\", error);\n//         }\n//     };\n\n//     return (\n//         <div className=\"dashboard\">\n//             <h2>Admin Dashboard</h2>\n//             <div className=\"stats\">\n//                 <p>Total Users: {totalUsers}</p>\n//                 <p>Total Leaders: {totalLeaders}</p>\n//             </div>\n\n//             <h3>Users and Leaders Details</h3>\n//             <table>\n//                 <thead>\n//                     <tr>\n//                         <th>Email</th>\n//                         <th>Role</th>\n//                         <th>Subscription</th>\n//                     </tr>\n//                 </thead>\n//                 <tbody>\n//                     {[...users, ...leaders].map(user => (\n//                         <tr key={user._id}>\n//                             <td>{user.email}</td>\n//                             <td>{user.role}</td>\n//                             <td>{user.subscription}</td>\n//                         </tr>\n//                     ))}\n//                 </tbody>\n//             </table>\n\n//             <h3>Manage Packages</h3>\n//             <div className=\"package-management\">\n//                 <h4>Add Package</h4>\n//                 <input\n//                     type=\"text\"\n//                     placeholder=\"Package Name\"\n//                     value={newPackage.name}\n//                     onChange={(e) => setNewPackage({ ...newPackage, name: e.target.value })}\n//                 />\n//                 <input\n//                     type=\"number\"\n//                     placeholder=\"Price\"\n//                     value={newPackage.price}\n//                     onChange={(e) => setNewPackage({ ...newPackage, price: e.target.value })}\n//                 />\n//                 <input\n//                     type=\"number\"\n//                     placeholder=\"Duration (months)\"\n//                     value={newPackage.duration}\n//                     onChange={(e) => setNewPackage({ ...newPackage, duration: e.target.value })}\n//                 />\n//                 <button onClick={handleAddPackage}>Add Package</button>\n\n//                 <h4>Existing Packages</h4>\n//                 <table>\n//                     <thead>\n//                         <tr>\n//                             <th>Name</th>\n//                             <th>Price</th>\n//                             <th>Duration</th>\n//                             <th>Action</th>\n//                         </tr>\n//                     </thead>\n//                     <tbody>\n//                         {packages.map(pkg => (\n//                             <tr key={pkg._id}>\n//                                 <td>\n//                                     {editingPackage && editingPackage._id === pkg._id ? (\n//                                         <input\n//                                             type=\"text\"\n//                                             value={editingPackage.name}\n//                                             onChange={(e) => setEditingPackage({ ...editingPackage, name: e.target.value })}\n//                                         />\n//                                     ) : pkg.name}\n//                                 </td>\n//                                 <td>\n//                                     {editingPackage && editingPackage._id === pkg._id ? (\n//                                         <input\n//                                             type=\"number\"\n//                                             value={editingPackage.price}\n//                                             onChange={(e) => setEditingPackage({ ...editingPackage, price: e.target.value })}\n//                                         />\n//                                     ) : pkg.price}\n//                                 </td>\n//                                 <td>\n//                                     {editingPackage && editingPackage._id === pkg._id ? (\n//                                         <input\n//                                             type=\"number\"\n//                                             value={editingPackage.duration}\n//                                             onChange={(e) => setEditingPackage({ ...editingPackage, duration: e.target.value })}\n//                                         />\n//                                     ) : pkg.duration}\n//                                 </td>\n//                                 <td>\n//                                     {editingPackage && editingPackage._id === pkg._id ? (\n//                                         <button onClick={() => handleEditPackage(pkg._id)}>Save</button>\n//                                     ) : (\n//                                         <button onClick={() => setEditingPackage(pkg)}>Edit</button>\n//                                     )}\n//                                 </td>\n//                             </tr>\n//                         ))}\n//                     </tbody>\n//                 </table>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default AdminDashboard;\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminDashboard = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 9\n  }, this);\n};\n_c = AdminDashboard;\nexport default AdminDashboard;\nvar _c;\n$RefreshReg$(_c, \"AdminDashboard\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","AdminDashboard","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/uki-jaffna/biddingweb/frontend/src/components/AdminDashboard.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n\n// const AdminDashboard = () => {\n//     const [leaders, setLeaders] = useState([]);\n//     const [users, setUsers] = useState([]);\n//     const [packages, setPackages] = useState([]);\n//     const [totalUsers, setTotalUsers] = useState(0);\n//     const [totalLeaders, setTotalLeaders] = useState(0);\n//     const [newPackage, setNewPackage] = useState({ name: '', price: '', duration: '' });\n//     const [editingPackage, setEditingPackage] = useState(null);\n\n//     // Fetch all data when the component mounts\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             try {\n//                 // Fetch leaders, users, and stats\n//                 const leadersResponse = await fetch('http://localhost:5000/api/admin/leaders');\n//                 const leadersData = await leadersResponse.json();\n\n//                 const usersResponse = await fetch('/api/admin/users');\n//                 const usersData = await usersResponse.json();\n\n//                 const packagesResponse = await fetch('http://api/admin/packages');\n//                 const packagesData = await packagesResponse.json();\n\n//                 const statsResponse = await fetch('/api/admin/stats');\n//                 const statsData = await statsResponse.json();\n\n//                 setLeaders(leadersData);\n//                 setUsers(usersData);\n//                 setPackages(packagesData);\n//                 setTotalUsers(statsData.totalUsers);\n//                 setTotalLeaders(statsData.totalLeaders);\n//             } catch (error) {\n//                 console.error(\"Error fetching data:\", error);\n//             }\n//         };\n//         fetchData();\n//     }, []);\n\n//     // Add a new package\n// const handleAddPackage = async () => {\n//     try {\n//         const response = await fetch('/api/package/api/admin/packages', { // Change to match the route defined\n//             method: 'POST',\n//             headers: { 'Content-Type': 'application/json' },\n//             body: JSON.stringify(newPackage),\n//         });\n//         if (response.ok) {\n//             const packageData = await response.json(); // Ensure you get the response data\n//             setPackages([...packages, packageData]); // Use the newly created package\n//             setNewPackage({ name: '', price: '', duration: '' });\n//             alert('Package added successfully');\n//         } else {\n//             alert('Failed to add package');\n//         }\n//     } catch (error) {\n//         console.error(\"Error adding package:\", error);\n//     }\n// };\n\n//     // Edit an existing package\n//     const handleEditPackage = async (packageId) => {\n//         try {\n//             const response = await fetch(`/api/admin/edit-package/${packageId}`, {\n//                 method: 'PUT',\n//                 headers: { 'Content-Type': 'application/json' },\n//                 body: JSON.stringify(editingPackage),\n//             });\n//             if (response.ok) {\n//                 alert('Package updated successfully');\n//                 setPackages(packages.map(pkg => pkg._id === packageId ? editingPackage : pkg));\n//                 setEditingPackage(null);\n//             } else {\n//                 alert('Failed to update package');\n//             }\n//         } catch (error) {\n//             console.error(\"Error editing package:\", error);\n//         }\n//     };\n\n//     return (\n//         <div className=\"dashboard\">\n//             <h2>Admin Dashboard</h2>\n//             <div className=\"stats\">\n//                 <p>Total Users: {totalUsers}</p>\n//                 <p>Total Leaders: {totalLeaders}</p>\n//             </div>\n\n//             <h3>Users and Leaders Details</h3>\n//             <table>\n//                 <thead>\n//                     <tr>\n//                         <th>Email</th>\n//                         <th>Role</th>\n//                         <th>Subscription</th>\n//                     </tr>\n//                 </thead>\n//                 <tbody>\n//                     {[...users, ...leaders].map(user => (\n//                         <tr key={user._id}>\n//                             <td>{user.email}</td>\n//                             <td>{user.role}</td>\n//                             <td>{user.subscription}</td>\n//                         </tr>\n//                     ))}\n//                 </tbody>\n//             </table>\n\n//             <h3>Manage Packages</h3>\n//             <div className=\"package-management\">\n//                 <h4>Add Package</h4>\n//                 <input\n//                     type=\"text\"\n//                     placeholder=\"Package Name\"\n//                     value={newPackage.name}\n//                     onChange={(e) => setNewPackage({ ...newPackage, name: e.target.value })}\n//                 />\n//                 <input\n//                     type=\"number\"\n//                     placeholder=\"Price\"\n//                     value={newPackage.price}\n//                     onChange={(e) => setNewPackage({ ...newPackage, price: e.target.value })}\n//                 />\n//                 <input\n//                     type=\"number\"\n//                     placeholder=\"Duration (months)\"\n//                     value={newPackage.duration}\n//                     onChange={(e) => setNewPackage({ ...newPackage, duration: e.target.value })}\n//                 />\n//                 <button onClick={handleAddPackage}>Add Package</button>\n\n//                 <h4>Existing Packages</h4>\n//                 <table>\n//                     <thead>\n//                         <tr>\n//                             <th>Name</th>\n//                             <th>Price</th>\n//                             <th>Duration</th>\n//                             <th>Action</th>\n//                         </tr>\n//                     </thead>\n//                     <tbody>\n//                         {packages.map(pkg => (\n//                             <tr key={pkg._id}>\n//                                 <td>\n//                                     {editingPackage && editingPackage._id === pkg._id ? (\n//                                         <input\n//                                             type=\"text\"\n//                                             value={editingPackage.name}\n//                                             onChange={(e) => setEditingPackage({ ...editingPackage, name: e.target.value })}\n//                                         />\n//                                     ) : pkg.name}\n//                                 </td>\n//                                 <td>\n//                                     {editingPackage && editingPackage._id === pkg._id ? (\n//                                         <input\n//                                             type=\"number\"\n//                                             value={editingPackage.price}\n//                                             onChange={(e) => setEditingPackage({ ...editingPackage, price: e.target.value })}\n//                                         />\n//                                     ) : pkg.price}\n//                                 </td>\n//                                 <td>\n//                                     {editingPackage && editingPackage._id === pkg._id ? (\n//                                         <input\n//                                             type=\"number\"\n//                                             value={editingPackage.duration}\n//                                             onChange={(e) => setEditingPackage({ ...editingPackage, duration: e.target.value })}\n//                                         />\n//                                     ) : pkg.duration}\n//                                 </td>\n//                                 <td>\n//                                     {editingPackage && editingPackage._id === pkg._id ? (\n//                                         <button onClick={() => handleEditPackage(pkg._id)}>Save</button>\n//                                     ) : (\n//                                         <button onClick={() => setEditingPackage(pkg)}>Edit</button>\n//                                     )}\n//                                 </td>\n//                             </tr>\n//                         ))}\n//                     </tbody>\n//                 </table>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default AdminDashboard;\n\n\nimport React, { useState, useEffect } from 'react';\n\nconst AdminDashboard = () => {\n    return (\n        <div className=\"dashboard\">\n        </div>\n    );\n};\n\nexport default AdminDashboard;\n"],"mappingsnD,MAAMC,cAAc,GAAGA,CAAA,KAAM;EACzB,oBACID,OAAA;IAAKE,SAAS,EAAC;EAAW;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrB,CAAC;AAEd,CAAC;AAACC,EAAA,GALIN,cAAc;AAOpB,eAAeA,cAAc;AAAC,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}